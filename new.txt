const mongoose = require("mongoose");

const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  referredBy: { type: mongoose.Schema.Types.ObjectId, ref: "User", default: null },
  referrals: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
  htag: { type: Number, default: 0 }, // Total downline count
  referralPercentage: { type: Number, default: 25 }, // Default 25%
  depositAmount: { type: Number, default: 0 }, // Total deposited balance
  dummy: { type: Array, default: [] } // Store commission logs
});

const User = mongoose.model("User", userSchema);
module.exports = User;

console.log("🚀 JAI SHREE RAM JI / JAI BAJARANG BALI JI 🚀");

const express = require("express");
const mongoose = require("mongoose");
const User = require("./models/new.schema");

const app = express();
const port = 9080;

const MONGO_URL = "mongodb://localhost:27017/ramsir";

mongoose
  .connect(MONGO_URL, {})
  .then(() => console.log("✅ MongoDB connected successfully"))
  .catch((err) => console.log("❌ Error in MongoDB connection:", err));

app.use(express.json()); // Middleware to parse JSON requests

// 🔥 Referral Percentage Update Logic
const updateReferralPercentage = async (userId) => {
  try {
    const user = await User.findById(userId);
    if (!user) return;

    let referralsCount = user.htag;
    console.log(referralsCount, "refferalCount");
    
    if (referralsCount >= 12000) user.referralPercentage = 60;
    else if (referralsCount >= 8000) user.referralPercentage = 57;
    else if (referralsCount >= 4000) user.referralPercentage = 55;
    else if (referralsCount >= 2000) user.referralPercentage = 52.5;
    else if (referralsCount >= 1000) user.referralPercentage = 50;
    else if (referralsCount >= 625) user.referralPercentage = 45;
    else if (referralsCount >= 125) user.referralPercentage = 40;
    else if (referralsCount >= 10) user.referralPercentage = 35;
    else user.referralPercentage = 25;

    await user.save();
  } catch (error) {
    console.error("❌ Error updating referral percentage:", error);
  }
};

// 🔥 Register First Main User (if not exists)
const createMainUser = async () => {
  const mainUser = await User.findOne({ email: "admin@example.com" });
  if (!mainUser) {
    const newUser = new User({ 
      name: "Admin", 
      email: "admin@example.com",
      referralPercentage: 25 
    });
    await newUser.save();
    console.log("✅ Main Admin User Created:", newUser);
  }
};
createMainUser();

// 🔥 Register User API & Update htag for 10 Levels
app.post("/register", async (req, res) => {
  try {
    const { name, email, referredById } = req.body;
    if (!name || !email) {
      return res.status(400).json({ message: "❌ Name and email are required" });
    }

    let newUser = new User({ name, email });

    if (referredById) {
      let referrer = await User.findById(referredById);
      if (referrer) {
        newUser.referredBy = referrer._id;
        referrer.referrals.push(newUser._id);
        await referrer.save();

        let currentReferrer = referrer;
        let level = 0;

        while (currentReferrer && level < 10) {
          currentReferrer.htag += 1;
          await updateReferralPercentage(currentReferrer._id);
          await currentReferrer.save();

          if (currentReferrer.referredBy) {
            currentReferrer = await User.findById(currentReferrer.referredBy);
          } else {
            break;
          }
          level++;
        }
      }
    }

    await newUser.save();
    res.json({ message: "✅ User registered successfully", userId: newUser._id });
  } catch (error) {
    console.error("❌ Error in registration:", error);
    res.status(500).json({ message: "Internal server error" });
  }
});



app.get("/", (req, res) => res.send("🚀 Referral System API Running! 🚀"));
app.listen(port, () => console.log(`🔥 Server running on port ${port}!`));

yaha mai chahat hu ek user kuch amount deposite kare and us amount jo perentage hai sabme kate or uske parent mai distribute ho jaye amount pertage kate har baar naki remaing ka kate 

eg:- samjho ek user hai user4 to usko user3 ne reffer kiya tha use user2 ne and usse1 
to user4 jab register karega to usak deposite amount ka jaise 120 hai uska 305 jo bhi fhir dusra user aaye uske jitna rahega 5% to 120 ka 5 

but yaha ek chezz hai commison pertage ki kisko lena hai ye aise decide hoga jaise

samjho user4 usne deposite kiya user3 uska parent hai to uska jitna percantage hai vo amount ka lelega and agar uske kuch nahi raha to ye remaining amount karke function call hoga
or gara useke upper koi raha to jaise user2 to user3 or user2 ke bech mai differnce dekhega kitna hai samjho user2 hai 30% and user3 hai 25% to 5% differnec aaya to user4 ka deposite mai se amount kaaat lega lekin ek limit tak 60% he katega sab jaise user3 ne liye 25% and user2 ne liya 5% aisa 60% se jadaa nahi jana chaiye 
